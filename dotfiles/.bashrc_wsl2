# .bashrc_wls
#
# .bashrc_wls is sourced by interactive shells from .bash_profile and .bashrc
#
# Customize these settings to your own preferences...
# ------------------------------------------------------------------------------------------------ #

[[ "${verbose:-false}" == "true" ]] && echo "in ~/.bash_wsl2"

# ------------------------------------------------------------------------------------------------ #
# WLS defaults
# ------------------------------------------------------------------------------------------------ #

# If set, the pattern "**" used in a pathname expansion context will match all files and zero or
# more directories and subdirectories.  shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable programmable completion features (you don't need to enable this, if it's already enabled in
# /etc/bash.bashrc and /etc/profile sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
set show-all-if-ambiguous on

# Fix Kerberos
export KRB5CCNAME=FILE:/tmp/tgt

# ------------------------------------------------------------------------------------------------ #
# Vendors, etc.
# ------------------------------------------------------------------------------------------------ #

export SPACK_ROOT=~/spack
if [[ -d $SPACK_ROOT ]]; then
  export PATH=$SPACK_ROOT/bin:$PATH

  MODULES_HOME=`spack location -i lmod`
  if [[ -d $MODULES_HOME ]]; then
    source $MODULES_HOME/lmod/lmod/init/bash
    module use `\ls -d $SPACK_ROOT/share/spack/lmod/*/Core`
    module load random123 numdiff cmake ack htop lcov mscgen doxygen graphviz
    module load py-fprettify py-autopep8 py-cmake-format
    module load gsl metis openblas
    module load eospac csk # ndi
    module load openmpi
    module load parmetis libquo caliper # superlu-dist trilinos
    module load clang-format
  fi
fi
export CXX=$(which g++)
export CC=$(which gcc)
export FC=$(which gfortran)

if [[ $(declare -f run &> /dev/null) != 0 ]]; then
   function run() {
     echo "==> $1";
     if [[ "${dry_run:-no}" == "no" ]]; then
        eval "$1";
     fi
   }
fi

# X11 via VcXSrv and xauth
# https://github.com/microsoft/WSL/issues/4106#issuecomment-530006295
# https://sourceforge.net/p/vcxsrv/wiki/VcXsrv%20%26%20Win10/

echo "1. DISPLAY = $DISPLAY"
if [[ "${DISPLAY:-notset}" == "notset" ]]; then
  if [[ -f /etc/resolv.conf ]]; then
    DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
  else
    echo "/etc/resolv.conf missing. Not setting DISPLAY"
  fi
fi
echo "2. DISPLAY = $DISPLAY"

# Test if X11 is working
if [[ "${DISPLAY:-notset}" != "notset" ]]; then
  mybool=$(timeout 1s xset q | grep -c Screen)
  echo "==> mybool = $mybool"
  if [[ "$mybool" != "0" ]]; then
    echo "X11 not working, attempting to fix..."
    add_to_xauth="false"
    # No X11
    # 1. Sync up .Xauthority if it exists, or create it.
    # 2. Print a message about running vcxsrv on win10.
    if ! [[ -f $HOME/.Xauthority ]]; then
      echo "No ~/.Xauthority file found."
      # create .Xauthority
      touch $HOME/.Xauthority
      add_to_xauth="true"
    elif [[ $(xauth list | head -n 1 | awk '{ print $1 }') !=  "${DISPLAY}" ]]; then
      echo "Regenerating ~/.Xauthority."
      # rm "$HOME/.Xauthority" && touch $HOME/.Xauthority
      add_to_xauth="true"
    fi
    if [[ ${add_to_xauth} == "true" ]]; then
      echo "Creating .Xauthority. Please enter a passphrase:"
      read passphrase
      magiccookie=$(echo "$passphrase"|tr -d '\n\r'|md5sum|gawk '{print $1}')
      run "xauth add $DISPLAY . $magiccookie"
      unset magiccookie
      unset passphrase
    fi
    unset add_to_xauth
    #echo "Trying to sync .Xauthority file. Please provide your Windows USERNAME:"
    # read windowsusername
    userprofile=$(wslpath $(/mnt/c/Windows/System32/cmd.exe /C "echo %USERPROFILE%" 2>/dev/null | tr -d '\r\n'))
    if [[ -f $HOME/.Xauthority ]] && [[ $(diff $HOME/.Xauthority $userprofile/.Xauthority) ]]; then
      run "cp $HOME/.Xauthority ${userprofile}/."
    fi
    # unset windowsusername
    # unset userprofile
    echo "On Win10, run \"vcxsrv.exe -multiwindow -clipboard -wgl -auth %USERPROFILE%\.Xauthority\""
    echo "You might need to exit from vcxsrv.exe and restart it with the proper options."
    echo -e "Optional: delete ~/.Xauthority and %USERPROFILE%\.Xauthority and try again.\n"
  fi
fi

export LIBGL_ALWAYS_INDIRECT=1
export VENDOR_DIR=~/vendors

export DISPLAY

if test -n "${verbose}"; then
  echo "DISPLAY    = $DISPLAY"
  echo "TERM       = $TERM"
  echo "VENDOR_DIR = $VENDOR_DIR"
  echo "CXX        = $CXX"
fi

# Enable docker

export PATH=~/bin:$PATH

#export PATH="$HOME/bin:$HOME/.local/bin:$PATH"
#export PATH="$PATH:/mnt/c/Program\ Files/Docker/Docker/resources/bin"
#alias docker=docker.exe
#alias docker-compose=docker-compose.exe
#export PATH="$PATH:/mnt/c/Program\ Files/Git/usr/bin"

keychain

# https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh
GOPATH=$HOME/go
function _update_ps1() {
    PS1="$($GOPATH/bin/powerline-go -error $?)"
}
if [ "$TERM" != "linux" ] && [ -f "$GOPATH/bin/powerline-go" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi


[[ "${verbose:-false}" == "true" ]] && echo "done with ~/.bash_wsl2"

# ------------------------------------------------------------------------------------------------ #
# End .bash_wls
# ------------------------------------------------------------------------------------------------ #
