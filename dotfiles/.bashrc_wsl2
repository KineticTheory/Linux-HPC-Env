# .bashrc_wls
#
# .bashrc_wls is sourced by interactive shells from .bash_profile and .bashrc
#
# Customize these settings to your own preferences...
# ------------------------------------------------------------------------------------------------ #

[[ "${verbose:-false}" == "true" ]] && echo "in ~/.bashrc_wsl2"

# ------------------------------------------------------------------------------------------------ #
# WLS defaults
# ------------------------------------------------------------------------------------------------ #

# If set, the pattern "**" used in a pathname expansion context will match all files and zero or
# more directories and subdirectories.  shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# don't escape dollar.
shopt -s direxpand

# enable programmable completion features (you don't need to enable this, if it's already enabled in
# /etc/bash.bashrc and /etc/profile sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
set show-all-if-ambiguous on

# Fix Kerberos
export KRB5CCNAME=FILE:/tmp/tgt

# ------------------------------------------------------------------------------------------------ #
# Vendors, etc.
# ------------------------------------------------------------------------------------------------ #

export SPACK_ROOT=~/devops-2025-05-15/dracose/spack
export SPACK_USER_CACHE_PATH=${SPACK_ROOT}/.spack
export SPACK_DISABLE_LOCAL_CONFIG=true

if [[ -d $SPACK_ROOT ]]; then
  echo "==> found spack_root"
  source $SPACK_ROOT/share/spack/setup-env.sh
  MODULES_HOME=`spack location -i lmod`
  if [[ -d $MODULES_HOME ]]; then
    echo "==> found modules_home"
    source $MODULES_HOME/lmod/lmod/init/bash
    module use `\ls -d $SPACK_ROOT/share/spack/lmod/*/Core`
    module load random123 numdiff ack htop lcov mscgen doxygen graphviz 
    module load py-fprettify py-autopep8 py-cmake-format py-six
    module load gsl metis openblas ninja python boost catch2 fmt spdlog
    module load eospac ndi
    module load openmpi hwloc hdf5 hypre 
    module load njoy-acetk njoy-fast-float njoy-tools ndatk mpark-variant avalanche shacl-physics shacl-storm 
    module load parmetis libquo caliper superlu-dist trilinos xtl xsimd xtensor xtensor-blas lua
    module load ghostscript git gmake py-flake8 py-sphinx py-sphinx-rtd-theme qt valgrind
    module load llvm
    # clang-format and clang-format-diff.py
    export PATH=$PATH:$(spack location -i llvm)/bin
    export PATH=$PATH:$(spack location -i llvm)/share/clang
    export SESAMEPATH=$HOME/physical_data/eos
  fi
fi
export CXX=$(which clang++)
export CC=$(which clang)
export FC=$(which gfortran)
export OMP_NUM_THREADS=4

if [[ $(declare -f run &> /dev/null) != 0 ]]; then
   function run() {
     echo "==> $1";
     if [[ "${dry_run:-no}" == "no" ]]; then
        eval "$1";
     fi
   }
fi

if [[ -d "/mnt/c/Users/107638/AppData/Local/Programs/Microsoft VS Code" ]]; then
  export PATH=$PATH:"/mnt/c/Users/107638/AppData/Local/Programs/Microsoft VS Code"
fi

export LIBGL_ALWAYS_INDIRECT=1
export VENDOR_DIR=~/vendors

# Enable docker
export PATH=~/bin:$PATH

keychain

[[ "${verbose:-false}" == "true" ]] && echo "done with ~/.bash_wsl2"

# ------------------------------------------------------------------------------------------------ #
# End .bash_wls
# ------------------------------------------------------------------------------------------------ #
